题目：
给定一个二叉树，找出其最小深度。

最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

说明：叶子节点是指没有子节点的节点。

代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if not root:
            return 0

        from collections import deque
        que = deque([root])
        depth = 1
        while que:
            for _ in range(len(que)):
                cur = que.popleft()
                if cur.left == None and cur.right == None:
                    return depth
                if cur.left:
                    que.append(cur.left)
                if cur.right:
                    que.append(cur.right)
            depth += 1
        return 0
        
理解：
定义一个depth变量 每一层遍历完之后 保证每个节点都有孩子节点后 depth再 +1 否则返回depth
