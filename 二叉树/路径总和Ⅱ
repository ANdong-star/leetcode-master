题目：
给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。

代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        results, path = [], []
        if not root:
            return results
        path.append(root.val)
        def path_sum(node, targetSum):
            if not node.left and not node.right and targetSum == 0: results.append(path[:])
            if not node.left and not node.right: return 
            if node.left:
                path.append(node.left.val)
                path_sum(node.left, targetSum - node.left.val)
                path.pop()
            if node.right:
                path.append(node.right.val)
                path_sum(node.right, targetSum - node.right.val)
                path.pop()
        path_sum(root, targetSum - root.val)
        return results

理解：
1. 不用self 也行
2. 不能用path作为形参 因为path.append()再赋值的时候 返回的是None
3. 要results.append(path([:]))  results.append(path)不可以 这里不知道是因为什么
