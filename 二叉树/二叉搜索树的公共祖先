题目：
给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if root.val > q.val and root.val > p.val:
            return self.lowestCommonAncestor(root.left, q, p)
        if root.val < q.val and root.val < p.val:
            return self.lowestCommonAncestor(root.right, q, p)
        return root

理解：
二叉搜索树的特征让公共祖先的题变得简单很多 其实只要符合.val在两个节点的val之间就是最近公共祖先 
