题目：
给你两棵二叉树 root 和 subRoot 。检验 root 中是否包含和 subRoot 具有相同结构和节点值的子树。如果存在，返回 true ；否则，返回 false 。

二叉树 tree 的一棵子树包括 tree 的某个节点和这个节点的所有后代节点。tree 也可以看做它自身的一棵子树。

代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: TreeNode, subRoot: TreeNode) -> bool:
        if not root:
            return False

        if self.issametree(root, subRoot): return True
        elif self.isSubtree(root.left, subRoot): return True
        elif self.isSubtree(root.right, subRoot): return True
        return False


    def issametree(self, left, right):
        if left == None and right == None: return True
        elif left != None and right == None: return False
        elif left == None and right != None: return False
        if left.val != right.val: return False
        compare_left = self.issametree(left.left, right.left)
        compare_right = self.issametree(left.right, right.right)
        is_same = compare_left and compare_right
        return is_same

理解：
这道题与二叉树相同相似 判断一个数是不是另一个数的子树 要么两棵树想用 要么这棵树的左右子树或者递归下去的左右子树是另一个数的子树
递归的停止条件是：根节点是None了  不过职场上可能递归写得少 之后这一系列 改成迭代法试一试
