题目：
给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。

假设二叉树中至少有一个节点。

代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:
        if not root:
            return None
        from collections import deque
        que = deque([root])
        result = 0
        while que:
            for i in range(len(que)):
                cur_node = que.popleft()
                if i == 0:
                    result = cur_node.val
                if cur_node.left:
                    que.append(cur_node.left)
                if cur_node.right:
                    que.append(cur_node.right)
        return  result

理解：
采用层序遍历的话很简单 只要把每一层第一个值保存就可以了 
但是 要掌握递归的方法  感觉对递归现在比较迷糊 等着二叉树刷完之后 总体系统的总结一下 掌握好递归

