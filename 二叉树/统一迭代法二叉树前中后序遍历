题目：
使用统一的迭代法实现二叉树的前中后序遍历

代码：

前序遍历：

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []

        results = []
        stack = [root]

        while stack:
            node = stack.pop()

            if node != None:
                if node.right:
                    stack.append(node.right)
                if node.left:
                    stack.append(node.left)
                
                stack.append(node)
                stack.append(None)
            else:
                results.append(stack.pop().val)

        return results
        
中序遍历：

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        results = []
        stack = [root]

        while stack:
            node = stack.pop()

            if node != None:
                if node.right:
                    stack.append(node.right)

                stack.append(node)
                stack.append(None)

                if node.left:
                    stack.append(node.left)

            else:
                results.append(stack.pop().val)

        return results
        
后序遍历：

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        results = []
        stack = [root]

        while stack:
            node = stack.pop()
            if node != None:
                stack.append(node)
                stack.append(None)
                if node.right:
                    stack.append(node.right)
                if node.left:
                    stack.append(node.left)
            else:
                results.append(stack.pop().val)
        return results

理解：
不太好理解  无法同时解决访问节点（遍历节点）和处理节点（将元素放进结果集）不一致的情况 需要用None来标记



