题目：
路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。

路径和 是路径中各节点值的总和。

给你一个二叉树的根节点 root ，返回其 最大路径和 。

代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.max_sum = -float("INF")
    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        #后序遍历
        def maxGian(root):
            if not root:
                return 0
            sum_left = max(maxGian(root.left), 0)
            sum_right = max(maxGian(root.right), 0)
            # print(sum_left)
            # print(sum_right)
            sum_now = sum_left + sum_right + root.val
            self.max_sum = max(sum_now, self.max_sum)
            # print(self.max_sum)
            return root.val + max(sum_left, sum_right)
        maxGian(root)
        return self.max_sum

理解：
确实难 好几个地方都要注意 
要专门设一个maxGian函数 不然return都没法return 
maxGianreturn的是一条线上的最大 所以加max
sum_now 是左右线都要的最大值 所以都加 并更新结果
为了防止左右值小于0 要与0进行比较
