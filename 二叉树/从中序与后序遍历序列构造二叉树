题目:
根据一棵树的中序遍历与后序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:
        #第一步 为空
        if not postorder:
            return None
        #第二步 确定中间节点
        post_val = postorder[-1]
        root = TreeNode(val = post_val)
        #第三步 确定中间节点在中序遍历序列中的位置
        post_index = inorder.index(post_val)

        #第四步 切割中序遍历序列  中间节点就不要了
        pre_inorder = inorder[:post_index]
        post_indor = inorder[post_index+1:]

        #第五步 切割后序遍历序列 最后一个节点也就是中间节点就不要了
        pre_postorder = postorder[:len(pre_inorder)]
        post_postorder = postorder[len(pre_inorder):len(inorder)-1]

        #第六步 递归
        root.left = self.buildTree(pre_inorder, pre_postorder)
        root.right = self.buildTree(post_indor, post_postorder)

        return root

理解：
分为六个步骤 还好 调用函数的方式感觉需要总结一下
