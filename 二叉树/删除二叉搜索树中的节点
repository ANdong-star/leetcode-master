题目：
给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。

一般来说，删除节点可分为两个步骤：

首先找到需要删除的节点；
如果找到了，删除它。

代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:
        #第一种情况 找到底找到None
        if not root:
            return None

        if root.val == key:
            #第二种情况 左右孩子都为空
            if not root.left and not root.right:
                del root
                return None
            #第三种情况
            if not root.left and root.right:
                tmp = root
                root = root.right
                del tmp
                return root
            #第四种情况
            if not root.right and root.left:
                tmp = root
                root = root.left
                del tmp 
                return root
            #第五种情况
            if root.left and root.right:
                tmp2 = root.right
                while tmp2.left:
                    tmp2 = tmp2.left
                tmp2.left = root.left
                tmp = root
                root = root.right
                del tmp
                return root
        if root.val > key: root.left = self.deleteNode(root.left, key)
        if root.val < key: root.right = self.deleteNode(root.right, key)
        return root

理解：
分五种情况 主要是第五种情况的理解 第五种情况的处理也符合二叉搜索树的性质
