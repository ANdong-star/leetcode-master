题目：
给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。

此外，你可以假设该网格的四条边均被水包围。

代码;
class Solution:
    
    #深度优先遍历 目的是把一个岛屿
    def dfs(self, grid, i, j):
        row = len(grid)
        col = len(grid[0])
        grid[i][j] = '0'
        for new_i, new_j in [[i-1, j],[i+1, j],[i, j-1],[i, j+1]]:
            if 0 <= new_i <= row - 1 and  0 <= new_j <= col - 1 and grid[new_i][new_j] == '1':
                self.dfs(grid, new_i, new_j)

    def numIslands(self, grid: List[List[str]]) -> int:
        #深度优先遍历 递归
        result = 0
        row = len(grid)
        col = len(grid[0])
        for i in range(row):
            for j in range(col):
                if grid[i][j] == '1':
                    result += 1
                    self.dfs(grid, i, j)
        return result

理解：
本题用的深度优先遍历dfs
