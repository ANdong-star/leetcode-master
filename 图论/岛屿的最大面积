题目：
给你一个大小为 m x n 的二进制矩阵 grid 。

岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。

岛屿的面积是岛上值为 1 的单元格的数目。

计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。

代码：
class Solution:
        #深度优先遍历 目的是把一个岛屿
    def dfs(self, grid, i, j):
        #终止条件 
        row = len(grid)
        col = len(grid[0])
        if i < 0 or i >= row or j < 0 or j >= col or grid[i][j] == 0:
            return 0
        grid[i][j] = 0
        area = 1
        for new_i, new_j in [[i-1, j],[i+1, j],[i, j-1],[i, j+1]]:
            area += self.dfs(grid, new_i, new_j)
        return area
    
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        result = 0
        row = len(grid)
        col = len(grid[0])
        for i in range(row):
            for j in range(col):
                if grid[i][j] == 1:
                    result = max(self.dfs(grid, i, j), result)
        return result

理解：
根据岛屿数量的代码可以改 记住设终止条件就可以了
