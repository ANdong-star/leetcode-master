题目：
给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。

示例 1:
输入: "abab"
输出: True
解释: 可由子字符串 "ab" 重复两次构成。

示例 2:
输入: "aba"
输出: False

示例 3:
输入: "abcabcabcabc"
输出: True
解释: 可由子字符串 "abc" 重复四次构成。 (或者子字符串 "abcabc" 重复两次构成。)

代码：
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        def getnext(self, next: list, ss: str):
            j = 0
            for i in range(1, len(ss)):  #要从下标1 开始 因为下标0一定是0 如果从下标0开始 就会变成1 
                while ss[j] != ss[i] and j > 0:
                    j = next[j-1]
                if ss[j] == ss[i]:
                    j += 1
                next[i] = j
            return next
            


        next = [0]*len(s)
        getnext(self, next, s)
        l = len(s)
        if l % (l - next[l-1]) == 0 and next[-1] != 0: #要记住排除next数组最后一个元素等于0的情况
            return True
        return False
        
理解：
利用kmp算法求 next数组的求解不需再说 记住后缀末尾的右移要从1开始 防止下标0的位置算成1
此外，本答案按照数组下标不减一进行计算 因此 最后计算最小周期的时候不需要+1 
再此外， 最后判断是否重复的时候 要记住排除 next数组最后一个元素为0的情况
总结 小心细致
