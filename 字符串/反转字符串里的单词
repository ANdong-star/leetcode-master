题目：
给定一个字符串，逐个翻转字符串中的每个单词。

示例 1：
输入: "the sky is blue"
输出: "blue is sky the"

示例 2：
输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。

示例 3：
输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。



class Solution:
    def reverseWords(self, s: str) -> str:
        def dele_spaces(self, s):   #删除重复的空格
            f = 0
            l = len(s) - 1
            tmp = []
            
            while s[f] == ' ':  #删除最前面的空格
                f += 1

           while s[l] ==' ':  #删除后面的空格 这个不能忽略 因为如果没有这两行代码 最后如果有一个或者一个以上的代码 有一个空格不会删掉
                l -= 1

            while f < l+1:   #删除中间的空格
            
                if s[f]!= ' ':
                    tmp.append(s[f])
                elif tmp[-1] != ' ':  #这一行写的很好 空格前面不是空格 则当前空格可以加进去
                    tmp.append(s[f])
                
                f += 1
            return tmp

        def reverse_string(self, s, left, right):

            while left < right:
                s[left], s[right] = s[right], s[left]   #双指针的方法调转字符数组  预留了left 和 right的接口 方便后面反转单词的函数调用和全部字符翻转的调用

                left += 1
                right -= 1
            return None
        
        def reverse_words(self, s):  #反转单词
            left, right = 0, 0
            while left < len(s):
                while right < len(s) and s[right] != ' ':
                    right += 1
                reverse_string(self, s, left, right-1)  #遇到空格  则将前面left和right区间内的字符反转
                left = right + 1
                right += 1
            return None

        l = dele_spaces(self, s)
        reverse_string(self, l, 0, len(l)-1)
        reverse_words(self, l)

        return ''.join(l)
        
        
理解：
按照 删除字符数组的多余空格  翻转所有的字符   翻转所有的单词（利用反转字符的函数接口） 步骤来操作










   
