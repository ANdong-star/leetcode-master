题目：
实现 strStr() 函数。

给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。

示例 1: 输入: haystack = "hello", needle = "ll" 输出: 2

示例 2: 输入: haystack = "aaaaa", needle = "bba" 输出: -1

说明: 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。 对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。


代码：
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        def getnext(self, next: list, s: str):
            j = 0
            for i in range(1, len(s)):
                while j > 0 and s[j] != s[i]:
                    j = next[j-1]
                if s[j] == s[i]:
                    j += 1

                next[i] = j               


        if len(needle) == 0:
            return 0
        
        next = [0]*len(needle)
        
        getnext(self, next, needle)
        n = 0

        for h in range(len(haystack)):  
            while  n > 0 and haystack[h] != needle[n]:  #要用while 一直回退直到符合条件  
                n = next[n-1]

            if haystack[h] == needle[n]:
                n += 1

            if n == len(needle):
                return h - n + 1
        return -1


 写的这个代码是根据next前缀数组 不发生其他变换的方式写的 
 总体处理步骤如下：
 若输入模式串为空 直接返回0
 初始化 定义空next数组 模式串最左边的下标 得到next 数组 
 
 其中 获得next数组的处理步骤为： 初始化前缀末尾下标 后缀末尾下标可以在循环里初始化  之后判断前后缀不同 或者 相同来 进一步处理 不同的时候按照之前的next数组回退 直到不满足回退条件  相同的时候右移
 最后 next的值其实就是 前缀末尾的值 也代表了 后缀末尾及其前面字符串的前缀子串和后缀字串 最长相等的长度
 
 之后：
 字符串的下标可以在循环里直接定义 开启字符串的右移
 while 不相等 回退 
 相等 右移 
 若 模式串到尾部 输出模式串第一个元素在字符串中的下标
 没有的话 返回-1
