题目：
给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

代码：
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        if len(prices) == 0 or k == 0:
            return 0
        dp = [[0]*(2*k+1) for _ in range(len(prices))]
        for i in range(1, 2*k, 2):
            dp[0][i] = -prices[0]
        for i in range(1, len(prices)):
            for j in range(0, 2*k-1, 2):  #因为后面要+1 +2 所以只用遍历到2*k-1就行了
                dp[i][j+1] = max(dp[i-1][j+1], dp[i-1][j] - prices[i]) #0就不用看了 单数是买入  买入阶段  
                dp[i][j+2] = max(dp[i-1][j+2], dp[i-1][j+1] + prices[i])  #双数是卖出 卖出阶段 一定要理解这个阶段的含义 如果不变的话 那前面也是卖出阶段
        return dp[-1][-1]

理解：
看注释就行了
