题目：
给定一个未经排序的整数数组，找到最长且 连续递增的子序列，并返回该序列的长度。

连续递增的子序列 可以由两个下标 l 和 r（l < r）确定，如果对于每个 l <= i < r，都有 nums[i] < nums[i + 1] ，那么子序列 [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] 就是连续递增子序列。

代码：
#贪心
class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        tmp = 1
        result = 1
        for i in range(len(nums)-1):
            if nums[i] < nums[i+1]:
                tmp += 1
                result = max(result, tmp)
            else:
                tmp = 1           
        return result     

#动态规划
class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        dp = [1] * len(nums)
        result = 1
        for i in range(len(nums)-1):
            if nums[i] < nums[i+1]:
                dp[i] = dp[i-1] + 1
                result = max(result, dp[i])
        return result

理解：
1. 贪心 判断递增nums[i] < nums[i+1]就行了 不用设置什么start啥的
2. dp 递推公式比较简单 满足条件就可以加一 
