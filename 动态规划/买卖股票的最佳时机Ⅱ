题目：
给定一个数组 prices ，其中 prices[i] 表示股票第 i 天的价格。

在每一天，你可能会决定购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以购买它，然后在 同一天 出售。
返回 你能获得的 最大 利润 。

代码：
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        dp = [[0]*2 for _ in range(len(prices))]
        dp[0][0] = -prices[0]
        dp[0][1] = 0
        for i in range(1, len(prices)):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] - prices[i]) #递推公式很重要
            dp[i][1] = max(dp[i-1][1], prices[i] + dp[i-1][0])  
        return dp[-1][1]

理解：
之前用贪心做了一次  这次用动态规划的方法 递推公式需要掌握 本题与原始买卖股票的最佳时机题的区别在于可以多次买卖股票
