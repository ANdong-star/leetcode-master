题目：
给你一个整数数组 nums 和一个整数 target 。

向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式：

例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-' ，然后串联起来得到表达式 "+2-1" 。
返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。

代码：
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        nums_sum = sum(nums)
        if abs(target) > nums_sum or (nums_sum + target) % 2 == 1: return 0  #target要加绝对值！
        bagsize = (nums_sum + target) // 2  #bagsize肯定是非负数
        dp = [0] * (bagsize + 1)  
        dp[0] = 1 #初始值设为1 这里还需要考虑
        for i in range(len(nums)):
            for j in range(bagsize, nums[i]-1, -1):
                dp[j] += dp[j-nums[i]] #递推公式的理解： 把组成dp[j]里面的nums[i]元素依次减去 看dp[j-nums[i]]的数量 然后相加 就是了
        print(dp)
        return dp[bagsize]

理解：
重点的一些内容都放在注释了
还有一个需要掌握的内容是如何根据题目关联到动态规划 重中之重是如何得出背包问题的容量值
