题目：
小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为 root 。

除了 root 之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果 两个直接相连的房子在同一天晚上被打劫 ，房屋将自动报警。

给定二叉树的 root 。返回 在不触动警报的情况下 ，小偷能够盗取的最高金额 。

代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rob(self, root: TreeNode) -> int:
        #难想的就是每个节点 偷或者不偷 都有一个值 每个节点用一个二个元素的一维数组存储
        result = self.rob_dp(root)
        return max(result[0], result[1])

    def rob_dp(self, root):
        if not root:
            return (0, 0)
        left = self.rob_dp(root.left)
        right = self.rob_dp(root.right)
        val1 = max(left[0], left[1]) + max(right[0], right[1])
        val2 = root.val + left[0] + right[0]     
        return (val1, val2)

理解：
难点就是想到每个节点都有偷或者不偷两种情况 都对应一个结果 所以用两个元素的一维数组来表示
