题目：
给你一个由 不同 整数组成的数组 nums ，和一个目标整数 target 。请你从 nums 中找出并返回总和为 target 的元素组合的个数。

题目数据保证答案符合 32 位整数范围。

示例 1：

输入：nums = [1,2,3], target = 4
输出：7
解释：
所有可能的组合为：
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
请注意，顺序不同的序列被视作不同的组合。
示例 2：

输入：nums = [9], target = 3
输出：0
 
提示：

1 <= nums.length <= 200
1 <= nums[i] <= 1000
nums 中的所有元素 互不相同
1 <= target <= 1000

代码：
class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0] * (target + 1)
        dp[0] = 1
        for j in range(1, target + 1):    #排列问题 所以先遍历背包容量 且是完全背包问题 所以从小到大遍历  dp[0]已经定了 所以从1开始遍历就可以了
            for i in range(len(nums)):
                if j >= nums[i]:
                    dp[j] += dp[j - nums[i]] 
        return dp[target]

理解：
虽说题目是组合问题 但其实是排列问题 排列的话遍历顺序会变化 由于j无法从nums[i]开始遍历 所以下面要设置判断条件
