题目：
给你一个字符串 s ，请你统计并返回这个字符串中 回文子串 的数目。

回文字符串 是正着读和倒过来读一样的字符串。

子字符串 是字符串中的由连续字符组成的一个序列。

具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。


代码：
class Solution:
    def countSubstrings(self, s: str) -> int:
        dp = [[False for _ in range(len(s))] for _ in range(len(s))]
        result = 0
        for i in range(len(s)-1, -1, -1):
            for j in range(i, len(s)):
                if s[j] == s[i]:
                    if j - i <= 1:
                        dp[i][j] = True
                        result += 1
                    elif dp[i+1][j-1] == True:
                        result += 1
                        dp[i][j] = True
        return result

理解：
dp数组的含义和与最终输出结果之间关系 递推公式 遍历顺序 都需要好好琢磨
尤其是递推的时候 当前后字母相等 且 中间距离大于1 的时候 如何判断是不是回文串
