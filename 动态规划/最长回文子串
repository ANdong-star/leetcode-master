题目：
给你一个字符串 s，找到 s 中最长的回文子串。

代码：
class Solution:
    def longestPalindrome(self, s: str) -> str:
        dp = [[False for i in range(len(s))] for j in range(len(s))]
        result = ''
        length_result = 0
        for i in range(len(s)-1, -1, -1):
            for j in range(i, len(s)):
                if s[j] == s[i]:
                    if j - i <= 1:
                        dp[i][j] = True
                    else:
                        dp[i][j] = dp[i+1][j-1]
                    if dp[i][j] == True:
                        if j - i + 1 > length_result:
                            length_result = j - i +1
                            result = s[i:j+1]
        return result

理解：
根据回文串数量那道题变过来 感觉空间复杂度有点高 更优的算法还没看
