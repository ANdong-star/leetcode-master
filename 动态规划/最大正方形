题目：
在一个由 '0' 和 '1' 组成的二维矩阵内，找到只包含 '1' 的最大正方形，并返回其面积。

代码：
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        #使用动态规划的思路 dp[i][j]代表以i,j为正方形右下角的最大边长 递推公式是推出来的 背过就可以了
        row, col = len(matrix), len(matrix[0])

        dp = [[0 for _ in range(col)] for _ in range(row)]
        result = 0
        for i in range(row):
            for j in range(col):
                if matrix[i][j] == '1':
                    if i == '0' or j == '0':
                        dp[i][j] = 1
                    else:
                        dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 #这个递推公式是推导出来的 背过就可以了
                    result = max(result, dp[i][j])
        max_area = result ** 2
        return max_area

理解：
使用动态规划的解法  dp[i][j]代表以i,j为右下角的正方形的最大边长 
跟左上角 左边 上边有关系
