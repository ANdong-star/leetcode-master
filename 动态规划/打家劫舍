题目：
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

代码：
class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        dp = [0] * len(nums)  #定义长度是输入数组的长度
        dp[0] = nums[0]
        dp[1] = max(nums[0], nums[1])
        
        for i in range(2, len(nums)):  #遍历的终点也是数组的最后一个元素
            dp[i] = max(dp[i-1], dp[i-2] + nums[i])
        return dp[-1]

理解：
dp五部曲 理解了就可以 定义的dp数组长度跟其他题目略有不同  这是因为本题的nums数组长度就是dp数组的长度了  其他的题目给的是个值 不包括0 所以长度要加一
