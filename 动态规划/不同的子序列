题目：
给定一个字符串 s 和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。

字符串的一个 子序列 是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，"ACE" 是 "ABCDE" 的一个子序列，而 "AEC" 不是）

题目数据保证答案符合 32 位带符号整数范围。

代码：
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        dp = [[0 for _ in range(len(t)+1)] for _ in range(len(s)+1)]
        for i in range(len(s)+1):
            dp[i][0] = 1
        for i in range(1, len(s)+1):  #不要忘了从1开始遍历
            for j in range(1, len(t)+1):
                if s[i-1] == t[j-1]:
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]
                else:
                    dp[i][j] = dp[i-1][j]
        return dp[-1][-1]

理解：
一个是递推公式的理解 尤其是s[i-1]和t[i-1]相同的时候 此时如果用当前一位 则s[i-1]和t[j-1]都会被直接抵消掉 如果不用 则用之前算出来的 j要一直遍历
一个是各种初始化 在沿着递推公式遍历的时候 发现dp[i][0] dp[0][j] 和dp[0][0]都必须给定初值 不然无法根据其他的递推出来 根据理解给定初值
这两个需要重点理解 
