题目：
给定一个正整数 n ，将其拆分为 k 个 正整数 的和（ k >= 2 ），并使这些整数的乘积最大化。

返回 你可以获得的最大乘积 。

代码：
class Solution:
    def integerBreak(self, n: int) -> int:
        dp = [0]*(n+1)  #因为有dp[0] 所以要多一个
        dp[2] = 1
        for i in range(3, n+1):
            for j in range(1, i-1): #到i-1 防止用到dp[1]
                dp[i] = max(dp[i], max(j*(i-j), j*dp[i-j]))  #用dp[i]的目的在于随着j的遍历 dp[i]的值需要更新
        return dp[n]

理解：
一些需要理解的都放在注释了 感觉从无到有想还是不好想 要深入理解
对于每个数值 都需要遍历求解 
第一个循环好理解
第二个循环 不好理解
