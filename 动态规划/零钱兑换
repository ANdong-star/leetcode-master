题目：
给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。

计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。

你可以认为每种硬币的数量是无限的。

示例 1：

输入：coins = [1, 2, 5], amount = 11
输出：3 
解释：11 = 5 + 5 + 1
示例 2：

输入：coins = [2], amount = 3
输出：-1
示例 3：

输入：coins = [1], amount = 0
输出：0
 
代码：
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        # 硬币数量无限 所以是 完全背包问题 所以从小到大遍历
        dp = [amount +1 ] * (amount + 1)    #amount + 1这个数是最多的硬币个数也不会 
        dp[0] = 0 #初始化 
        for i in range(len(coins)):   #求最小值 所以组合问题或者排列问题都无所谓 先遍历哪个都可以
            for j in range(coins[i], amount + 1):
                dp[j] = min(dp[j], dp[j - coins[i]] + 1)
        return dp[amount] if dp[amount] < amount + 1 else -1 #dp[amount]初始化为amount + 1 若有效的话会被赋值

理解：
五个步骤理解就可以 不同的题型都会不一样
