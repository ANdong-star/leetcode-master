题目：
给你一个整数 n ，对于 0 <= i <= n 中的每个 i ，计算其二进制表示中 1 的个数 ，返回一个长度为 n + 1 的数组 ans 作为答案。

代码：
class Solution:
    def countBits(self, n: int) -> List[int]:
        #一个非常重要的规律 在思路上和代码上都大大优化
        #动态规划 若所在位置是奇数位置 则1的数量比上一次肯定多一个 也就是最后一位 若所在位置是偶数位置 则1的个数和所在位置除以2的数量相同 因为是两倍的话 也相当于往前移一位
        result = [0] * (n + 1)

        for i in range(1, n+1):
            if (i % 2) == 1:  #奇数
                result[i] = result[i-1] + 1
            else:
                result[i] = result[i//2] 
        
        return result

理解：
理解好奇数和偶数位置如果推的就可以了
