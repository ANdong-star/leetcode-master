题目：
给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。

算法的时间复杂度应该为 O(log (m+n)) 。

代码：
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        cur_nums1, cur_nums2 = 0, 0
        nums = [0]*(len(nums1)+len(nums2))
        length = len(nums)
        for i in range(length):
            if cur_nums1 == len(nums1): 
                nums[i] = nums2[cur_nums2]
                cur_nums2 += 1
            elif cur_nums2 == len(nums2):
                    nums[i] = nums1[cur_nums1]
                    cur_nums1 += 1                  
            else:
                if nums1[cur_nums1] <= nums2[cur_nums2]:
                    nums[i] = nums1[cur_nums1]
                    cur_nums1 += 1                
                else:
                    nums[i] = nums2[cur_nums2]
                    cur_nums2 += 1
        if length % 2 == 0:
            return ( nums[int(length/2)] + nums[int(length/2) -1] ) / 2
        else:
            return nums[int(length/2)]

理解：
双指针 先把集合好的数组建出来 
在建的过程中数组内索引查找的时候要注意 不能超出限制 所以要判断此时遍历到的两个数组的索引下标是否还在范围内
