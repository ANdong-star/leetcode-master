题目：
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

如果数组中不存在目标值 target，返回 [-1, -1]。

进阶：

你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？

代码：
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        # 按照二分法查找 找不到那肯定[-1, -1]
        #找得到就左右滑动窗口 找范围
        left, right = 0, len(nums) - 1
        index = -1
        while left <= right:
            middle = (left + right) // 2
            if nums[middle] > target:
                right = middle - 1
            elif nums[middle] < target:
                left = middle + 1
            else:
                index = middle
                break
        if index == -1:
            return [-1, -1]
        else:
            left, right = index, index
            while left - 1 >= 0 and nums[left-1] == nums[left]:  #向左滑动
                left -= 1
            while right + 1 < len(nums) and nums[right + 1] == nums[right]: #向右滑动
                right += 1
            return [left, right]

理解：
二分法找到元素 然后滑动窗口比较好理解
