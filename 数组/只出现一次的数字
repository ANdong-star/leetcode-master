题目：
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

代码：
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        nums.sort()
        if len(nums) == 1:
            return nums[0]
        for i in range(0, len(nums) - 2, 2):
            if nums[i] != nums[i+1]:
                return nums[i]
        return nums[-1]

理解：
要求用线性的时间复杂度和不适用额外的空间 就想到了排再遍历的方式 但是要注意最后数组的访问不要超出限制
