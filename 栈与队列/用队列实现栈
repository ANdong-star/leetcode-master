题目：
使用队列实现栈的下列操作：

push(x) -- 元素 x 入栈
pop() -- 移除栈顶元素
top() -- 获取栈顶元素
empty() -- 返回栈是否为空
注意:

你只能使用队列的基本操作-- 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。
你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。
你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。


代码：
from collections import deque

class MyStack:

    def __init__(self):
        self.queue_in = deque()
        self.queue_out = deque()

    def push(self, x: int) -> None:
        self.queue_in.append(x)

    def pop(self) -> int:
        if not self.empty():
            for i in range(len(self.queue_in)-1):
                self.queue_out.append(self.queue_in.popleft())
            self.queue_in, self.queue_out = self.queue_out, self.queue_in

            return self.queue_out.popleft()


    def top(self) -> int:
        if not self.empty():
            return self.queue_in[-1]

    def empty(self) -> bool:
        return len(self.queue_in) == 0 


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()

理解：
队列实现栈  python中的四种queue 没有类似peek操作 也无法索引操作 因此实现top的时候比较困难 
list可以实现类似peek 但是实现peek(0)的时候时间复杂度为O(n)
因此选择collections中的 deque 数据类型 即双向队列 只使用popleft()和append()功能 来实现单向队列的功能 
而且 deque支持索引操作 因此可以实现类似peek()的功能  并且时间复杂度为O(1)
