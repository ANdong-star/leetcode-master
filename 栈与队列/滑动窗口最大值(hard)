题目：
给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。

返回滑动窗口中的最大值。

进阶：
你能在线性时间复杂度内解决此题吗？


提示：

1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4
1 <= k <= nums.length

代码：
class MyQueue:
    def __init__(self):
        self.queue = []
    def pop(self, value):
        if self.queue and value == self.queue[0]:
            self.queue.pop(0)
    def push(self, value):
        while self.queue and value > self.queue[-1]:
            self.queue.pop()
        self.queue.append(value)
    def front(self):        
        return self.queue[0]
        
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        result = []
        que = MyQueue()
        for i in range(k):
            que.push(nums[i])
        result.append(que.front())
        for i in range(k, len(nums)):
            que.pop(nums[i-k])
            que.push(nums[i])
            result.append(que.front())
        return result


理解：
比较难的一道题 最重要的是理解建立的单调队列的作用
总的来说 随着滑动窗口的移动 单调队列每次都要pop push 求最大值三个操作 
这三个操作都不是传统意义上的pop push 和求最大值操作 主要是push操作为逻辑的开始 pop和front顺从push
push 肯定会压入 但是前面只要比压入的小 全部弹出队列  #这就保证了队列最左边肯定是最大值 并且滑动窗口内肯定有要考虑的元素
pop 看是不是最大值 是最大值才会弹出  因为前面的元素是顺序进来的 所以只要队列最左边元素不是最大值 那队列里就不会存在要pop的元素 因为之前push的时候都被弹出了
front 返回最左边元素就行了

#二刷 
class MyQueue:
    def __init__(self):
        self.stack = []
    def push(self, vaule):
        while self.stack and self.stack[-1] < vaule:
            self.stack.pop()
        self.stack.append(vaule)
    def pop(self, vaule):
        if self.stack and vaule == self.stack[0]:
            self.stack.pop(0)
    def front(self):
        if self.stack:
            return self.stack[0]

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        que = MyQueue()
        result = []
        #第一个窗口 一个一个的放入
        for i in range(k):
            que.push(nums[i])
        result.append(que.front())
        for i in range(k, len(nums)):
            que.pop(nums[i-k])
            que.push(nums[i])
            result.append(que.front())
        return result
        
        
二刷理解：
每次滑动窗口移动的时候 进入的元素 直接进去把小的元素全挤出去 这是因为这些元素都比新进去的元素小 因此以后选最大元素不可能用到了 （这是本题的核心思想）
因此 每次都可以从最前面直接得到滑动窗口内的最大元素
此外 除了进入的元素 还得有元素出去 比较小的元素肯定早被踢走了 但是有些很大的元素 可能一直占据最大元素的位置 必须要更新掉
当滑动窗口的左边对应的数组的元素还在 如果在的话那肯定在最左边 （不在最左边 也就是有其他元素比他大， 那他肯定早被踢走了）  此时就更新掉
建立一个单调栈好封装 方便快捷


