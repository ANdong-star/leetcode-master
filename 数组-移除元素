题目：
给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

空间复杂度必须为 O(1)
时间复杂度为 O(n)的话比较好 

使用双指针法 

class Solution:
    """双指针法
    时间复杂度：O(n)
    空间复杂度：O(1)
    """

    @classmethod
    def removeElement(cls, nums: List[int], val: int) -> int:
        fast = slow = 0

        while fast < len(nums):

            if nums[fast] != val:
                nums[slow] = nums[fast]
                slow += 1

            # 当 fast 指针遇到要删除的元素时停止赋值
            # slow 指针停止移动, fast 指针继续前进
            fast += 1

        return slow

理解：
快指针走在慢指针的前面，慢指针收集所有删除对应元素后的剩余元素组成新的数组，快指针判断是否遇到了要删除的元素，遇到了慢指针不接受赋值，没有遇到慢指针接受快指针的赋值。
