题目：
你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。

你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：

你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。
你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。
一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。
给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。

代码：
class Solution:
    def totalFruit(self, fruits: List[int]) -> int:
        left = 0
        kep = set()
        kep.add(fruits[0])
        count = 1
        for right in range(1, len(fruits)):
            #先放进去
            kep.add(fruits[right])
            if len(kep) <= 2:
                count = max(count, right-left+1)
            else:
                #kep清理
                while len(kep) > 2:
                    left += 1
                    fruit = fruits[left:right+1]
                    kep = set(fruit)
        return count

理解：
一个是每次right移动的时候都要放进篮 不爆万事大吉 爆了前进left直到符合条件
一个是遇到爆了的时候while到符合条件 利用set(list)的思想做

总结 刚开始要想好整体的代码核心逻辑 不是确定了双指针就直接做了 而是想好具体怎么移动 比如本题 right必放 一步一步移动 爆了的时候再移动left
