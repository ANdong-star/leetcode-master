题目：

题意： 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

为了表示给定链表中的环，使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。


代码：

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:

        slow, fast = head, head

        while fast and fast.next:    #必须用这个判断语句  None和倒数第一个不行  记住就行了
                                    #若用 fast.next None的时候没有属性
                                    #若用 fast.next.next 倒数第一个 或者 None的时候没有属性
                                    #若用 fast.next.next and fast.next 倒数第一个 第二个不行 倒数第一个的时候fast.next.next没有属性
            fast = fast.next.next
            slow = slow.next
            if fast == slow:
                fast = head
                while fast!=slow:
                    fast = fast.next
                    slow = slow.next
                return slow
        return None
        
        
理解：
首先使用快慢指针的思想判断有没有环
有环的话 按照数学的公示推导 得出一个从head 一个从相遇点走 肯定在环的入口相遇 

