题目描述：
给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。


代码：
参考：
class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        res = ListNode(next=head)
        pre = res
        
        # 必须有pre的下一个和下下个才能交换，否则说明已经交换结束了
        while pre.next and pre.next.next:
            cur = pre.next
            post = pre.next.next
            
            # pre，cur，post对应最左，中间的，最右边的节点
            cur.next = post.next
            post.next = cur
            pre.next = post

            pre = pre.next.next
        return res.next



自己写的：
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        res = ListNode(next=head)
        cur = res

        while cur.next and cur.next.next:
            temp = cur.next
            temp2 = cur.next.next.next

            cur.next = temp.next
            cur.next.next = temp
            temp.next = temp2 



            cur = cur.next.next
        
        return res.next
        
 理解：
 .next 是指向  直接点名节点是真的节点 包括以后所有的指向和值  
 当指向变了的时候 之前的指向就自动断掉了  但是这个节点的值还在 它也有自己的指向 
    
    
