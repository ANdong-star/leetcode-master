题目：
给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。

解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。

代码：
class Solution:
    def __init__(self):
        self.path = []
        self.results = []
    
    def subsets(self, nums: List[int]) -> List[List[int]]:
        self.backtracking(nums, 0)
        return self.results

    def backtracking(self, nums, Start_Index):
        self.results.append(self.path[:])
        # if Start_Index == len(nums):
        #     return
        for i in range(Start_Index, len(nums)):
            self.path.append(nums[i])
            self.backtracking(nums, i + 1)
            self.path.pop()
        return self.results

理解：
强调两点：
1. 集合是无序的 因此为了不重复 所以设置 Start_Index 
2. 子集 不是求叶子节点 是所有的节点都放进results中去
