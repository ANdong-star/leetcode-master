题目：
给你一份航线列表 tickets ，其中 tickets[i] = [fromi, toi] 表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。

所有这些机票都属于一个从 JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。

例如，行程 ["JFK", "LGA"] 与 ["JFK", "LGB"] 相比就更小，排序更靠前。
假定所有机票至少存在一种合理的行程。且所有的机票 必须都用一次 且 只能用一次。

代码：
class Solution:
    def findItinerary(self, tickets: List[List[str]]) -> List[str]:
        ticket_list = defaultdict(list)
        #建立映射字典
        for ticket in tickets:
            ticket_list[ticket[0]].append(ticket[1])
        results = ['JFK']

        def backtracking(Start_city):
            if len(results) == len(tickets) + 1:
                return True
            ticket_list[Start_city].sort()
            for _ in ticket_list[Start_city]:
                # print(_)
                arrive_city = ticket_list[Start_city].pop(0)
                # print(arrive_city)
                results.append(arrive_city)
                if backtracking(arrive_city):
                    return True
                ticket_list[Start_city].append(arrive_city)
                results.pop()
        backtracking('JFK')
        return results

理解：
1. 代码思路：
先用字典建立地点的映射表 
之后从JFK开始找终点 也是之后的起点 每次需要将终点进行排序 从小的开始 如果小的不成功才轮到大的
返回值只需要bool就可以 找到一条符合条件的就可以结束程序 因此找到的都是复合条件的小的
回溯递归的时候 用的是pop(0)值 而不是for循环的值 还不完全理解
防止陷入死循环的措施是随时删掉用过的地点
