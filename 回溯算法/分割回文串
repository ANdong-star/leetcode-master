题目：
给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。

回文串 是正着读和反着读都一样的字符串。

代码：
class Solution:
    def __init__(self):
        self.path = []
        self.results = []
    
    def partition(self, s: str) -> List[List[str]]:
        self.backtracking(s, 0)
        return self.results

    def backtracking(self, s, Start_Index):
        if Start_Index == len(s):
            self.results.append(self.path[:])
            return
        for i in range(Start_Index, len(s)):
            if self.huiwen(s, Start_Index, i):
                self.path.append(s[Start_Index:i+1])
                self.backtracking(s, i + 1)
                self.path.pop()
            else:
                continue

    def huiwen(self, s, Start_Index, i):          
        start = Start_Index
        end = i
        while start < end:
            if s[start] != s[end]:
                return False
            else:
                start += 1
                end -= 1
        return True


理解：

难点：
1. 切割问题可以抽象为组合问题
2. 如何模拟那些切割线
3. 切割问题中递归如何终止
4. 在递归循环中如何截取子串
5. 如何判断回文

