题目：
n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。

给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。

每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。

代码：
class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        board = [['.'] * n for i in range(n)]
        results = []
        def is_valid(board, row, col):
            #验证每一行是否符合
            for i in range(row):
                if board[i][col] == 'Q':
                    return False
            #验证左上角
            i, j = row - 1, col -1
            while i >=0 and j >=0:
                if board[i][j] == 'Q':
                    return False
                i -= 1
                j -= 1
            #验证右上角
            i, j = row -1, col + 1
            while i >= 0 and j < len(board):
                if board[i][j] == 'Q':
                    return False
                i -= 1
                j += 1
            return True

        def backtracking(board, row, col):
            if row == n:
                res_tmp = []
                for i in board:
                    res_ = ''.join(i)
                    res_tmp.append(res_)
                results.append(res_tmp)
            for col in range(n):
                if is_valid(board, row, col):
                    board[row][col] = 'Q'
                    backtracking(board, row + 1, n)
                    board[row][col] = '.'
        backtracking(board, 0, n)
        return results

理解：
整体逻辑：
先定义棋盘
从第一行开始
从第一列开始 判断是否符合
判断符合的时候一个是同一列是否符合 一个是左上角和右上角是否符合

输出的其实是字符串列表 因此需要转字符串操作
