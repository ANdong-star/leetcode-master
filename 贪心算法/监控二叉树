题目：
给定一个二叉树，我们在树的节点上安装摄像头。

节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。

计算监控树的所有节点所需的最小摄像头数量。

代码：
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def minCameraCover(self, root: TreeNode) -> int:
        result = 0
        def backtracking(root):
            nonlocal result

            if not root:
                return 2
            left = backtracking(root.left)
            right = backtracking(root.right)

            if left == 0 or right == 0: #有一个无覆盖就要放摄像头
                result += 1
                return 1
            elif left == 1 or right == 1:  #有一个摄像头就是有覆盖
                return 2
            elif left == 2 and right == 2:  #只有两个都覆盖了 才可以无覆盖
                return 0

        if backtracking(root) == 0:  #别忘了最后判断根节点是否覆盖 在调用判断语句的时候 回溯函数已经被调用了
            result += 1
        return result

理解：
判断语句要对所有情况都覆盖 判断的时候要考虑清楚
