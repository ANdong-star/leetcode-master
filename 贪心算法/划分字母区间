题目：
字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。

代码：
class Solution:
    def partitionLabels(self, s: str) -> List[int]:
        hash = [0]*26
        for i in range(len(s)):
            hash[ord(s[i]) - ord('a')] = i
        
        result = []
        left = 0
        right = 0

        for i in range(len(s)):
            right = max(right, hash[ord(s[i]) - ord('a')])
            if right == i:
                result.append(right - left + 1)
                left = right + 1
        return result
            
理解：
哈希表能够存储每个字符最晚出现的位置
算法的核心逻辑是：
从左向右遍历 记录最晚位置 当最晚位置与当前位置重合时 能够保证此位置之前的所有元素都能够符合题目要求 
